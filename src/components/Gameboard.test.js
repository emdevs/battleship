import Gameboard from "./Gameboard";
import Ship from "./Ship";
const empty_board = [
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""]
];

const board_1 = [
    ["","","","","","","three","three","three",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","one","","","","","","","",""],
    ["","","","","","","","","two",""],
    ["","","","","","","","","two",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""],
    ["","","","","","","","","",""]
];

describe("placeShip function works", () => {
    let gb = Gameboard();

    test("Place ship on empty board", () => {
        expect(gb.placeShip("two", [18, 28], empty_board)
        ).toEqual(
            [
                ["","","","","","","","","",""],
                ["","","","","","","","","two",""],
                ["","","","","","","","","two",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""]
            ]
        );
    });

    test("Place ship on empty board", () => {
        expect(gb.placeShip("four", [0, 3], empty_board)
        ).toEqual(
            [
                ["four","four","four","four","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""]
            ]
        );
    });

    test("Place ship on empty board", () => {
        expect(gb.placeShip("three", [81, 61], empty_board)
        ).toEqual(
            [
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","","","","","","","","",""],
                ["","three","","","","","","","",""],
                ["","three","","","","","","","",""],
                ["","three","","","","","","","",""],
                ["","","","","","","","","",""]
            ]
        );
    });
});

describe("recieveAttack function works", () => {
    let gb = Gameboard(board_1);

    test("recieve attack hits ship", () => {
        expect(gb.recieveAttack(31)).toEqual([]);
    });

    test("recieve attack misses", () => {
        expect(gb.recieveAttack(10)).toEqual([10]);
    });

    test("recieve attack misses", () => {
        expect(gb.recieveAttack(42)).toEqual([10, 42]);
    })

    test("recieve attack hits ship", () => {
        expect(gb.recieveAttack(8)).toEqual([10, 42]);
    })
});
